---
import Head from "@components/Head.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import { SITE } from "@consts";

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <Head title={`${title} | ${SITE.NAME}`} description={description} />

    <!-- Set initial theme early to prevent flash -->
    <script is:inline>
      (function() {
        let theme = 'dark';
        try {
          theme = localStorage.getItem('theme') || 'dark';
        } catch (e) {
          console.warn('LocalStorage is not available; defaulting to dark theme.');
        }
        if (theme === 'dark') {
          document.documentElement.classList.add('dark');
        } else {
          document.documentElement.classList.remove('dark');
        }
      })();
    </script>

    <!-- Deferred third-party scripts -->
    <script src="https://platform.twitter.com/widgets.js" defer></script>
    <script async src="https://cdn.seline.so/seline.js" data-token="3e7a569e0f2bcad"></script>
    <!-- Include other deferred scripts as needed -->
  </head>
  <body class="bg-stone-100 dark:bg-stone-900 text-black dark:text-white">
    <Header />
    <main>
      <slot />
    </main>
    <Footer />

    <!-- Back to Top and Last Update Buttons -->
    <button
      id="backToTop"
      class="fixed bottom-5 right-5 p-3 bg-black text-white rounded-full hidden"
    >
      Back to Top
    </button>
    <button
      id="lastUpdate"
      class="fixed bottom-20 right-5 p-3 bg-red-700 text-white rounded-full"
    >
      Last Update
    </button>

    <!-- Inline Script -->
    <script is:inline>
      (function() {
        // Function to switch to light theme
        function switchToLightTheme() {
          document.documentElement.classList.remove('dark');
          try {
            localStorage.setItem('theme', 'light');
          } catch (e) {
            console.warn('Unable to save theme preference to localStorage.');
          }
        }

        // Function to switch to dark theme
        function switchToDarkTheme() {
          document.documentElement.classList.add('dark');
          try {
            localStorage.setItem('theme', 'dark');
          } catch (e) {
            console.warn('Unable to save theme preference to localStorage.');
          }
        }

        // Wait for DOM content to be loaded
        document.addEventListener('DOMContentLoaded', function() {
          // Add event listeners to all light theme buttons
          var lightButtons = document.querySelectorAll('.light-theme-button');
          lightButtons.forEach(function(button) {
            button.addEventListener('click', switchToLightTheme);
            button.addEventListener('touchend', switchToLightTheme);
          });

          // Add event listeners to all dark theme buttons
          var darkButtons = document.querySelectorAll('.dark-theme-button');
          darkButtons.forEach(function(button) {
            button.addEventListener('click', switchToDarkTheme);
            button.addEventListener('touchend', switchToDarkTheme);
          });

          // Scroll event handling with passive listener
          window.addEventListener('scroll', function() {
            var backToTopButton = document.getElementById('backToTop');
            var lastUpdateButton = document.getElementById('lastUpdate');
            var footer = document.querySelector('footer');

            if (backToTopButton && lastUpdateButton && footer) {
              var footerPosition = footer.getBoundingClientRect().top + window.scrollY;
              var threshold = 100; // Adjust this value if needed

              // Show/hide back to top button
              if (
                window.scrollY > 200 &&
                window.scrollY + window.innerHeight < footerPosition
              ) {
                backToTopButton.classList.remove('hidden');
              } else {
                backToTopButton.classList.add('hidden');
              }

              // Show/hide last update button
              if (window.scrollY + window.innerHeight >= footerPosition - threshold) {
                lastUpdateButton.classList.add('hidden');
              } else {
                lastUpdateButton.classList.remove('hidden');
              }
            }
          }, { passive: true });

          // Back to Top button functionality
          var backToTopButton = document.getElementById('backToTop');
          if (backToTopButton) {
            backToTopButton.addEventListener('click', function() {
              window.scrollTo({ top: 0, behavior: 'smooth' });
            });
            backToTopButton.addEventListener('touchend', function() {
              window.scrollTo({ top: 0, behavior: 'smooth' });
            });
          }

          // Last Update button functionality
          var lastUpdateButton = document.getElementById('lastUpdate');
          if (lastUpdateButton) {
            lastUpdateButton.addEventListener('click', function() {
              window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
            });
            lastUpdateButton.addEventListener('touchend', function() {
              window.scrollTo({ top: document.body.scrollHeight, behavior: 'smooth' });
            });
          }

          // Lazy loading for iframes
          var lazyIframes = document.querySelectorAll('iframe.lazy-iframe');

          if ('IntersectionObserver' in window) {
            var lazyIframeObserver = new IntersectionObserver(function(entries) {
              entries.forEach(function(entry) {
                if (entry.isIntersecting) {
                  var iframe = entry.target;
                  iframe.src = iframe.dataset.src || '';
                  iframe.classList.remove('lazy-iframe');
                  lazyIframeObserver.unobserve(iframe);
                }
              });
            });

            lazyIframes.forEach(function(iframe) {
              lazyIframeObserver.observe(iframe);
            });
          } else {
            // Fallback for browsers that do not support IntersectionObserver
            lazyIframes.forEach(function(iframe) {
              iframe.src = iframe.dataset.src || '';
              iframe.classList.remove('lazy-iframe');
            });
          }
        });
      })();
    </script>
  </body>
</html>
