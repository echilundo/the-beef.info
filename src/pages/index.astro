---
import { getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import { formatDate } from "@lib/utils";
import { WORK } from "@consts";

// Pre-sort the collection during build time
const collection = (await getCollection("work"))
  .sort((a, b) => new Date(a.data.dateStart).valueOf() - new Date(b.data.dateStart).valueOf());

// Process content at build time
const work = await Promise.all(
  collection.map(async (item) => {
    const { Content } = await item.render();
    return { ...item, Content };
  })
);
---

<PageLayout title={WORK.TITLE} description={WORK.DESCRIPTION}>
  <Container>
    <div class="space-y-10">
      <h1 class="font-semibold text-black dark:text-white text-2xl">
        Timeline
      </h1>      
      <div class="prose dark:prose-invert">
        <p class="text-lg font-medium">
          The full timeline of the greatest beef ðŸ¥© saga in hip-hop.
        </p>
        <p class="text-sm text-gray-500 dark:text-gray-400 italic">
          It's a heavy page, so please be patient.
        </p>
      </div>
      
      <ul 
        class="flex flex-col space-y-12" 
        aria-label="Timeline of events"
      >
        {work.map((entry, index) => (
          <li class="timeline-item opacity-0">
            <time 
              datetime={new Date(entry.data.dateStart).toISOString()}
              class="text-sm text-gray-600 dark:text-gray-400"
            >
              {formatDate(new Date(entry.data.dateStart))}
            </time>
            <div class="font-semibold text-black dark:text-white">
              {entry.data.company}
            </div>
            <div class="text-sm text-gray-600 dark:text-gray-400">
              {entry.data.role}
            </div>
            <article 
              class="mb-8 content-visibility-auto contain-intrinsic-size-[0_500px]"
            >
              <entry.Content />
            </article>
            {index !== work.length - 1 && (
              <hr class="mt-14 border-t border-gray-300 dark:border-gray-700" aria-hidden="true" />
            )}
          </li>
        ))}
      </ul>
    </div>
  </Container>
</PageLayout>

<style>
  .timeline-item {
    transform: translateY(20px);
    will-change: opacity, transform;
    transition: opacity 0.5s ease, transform 0.5s ease;
  }

  .timeline-item.visible {
    opacity: 1;
    transform: translateY(0);
  }

  @media (prefers-reduced-motion: reduce) {
    .timeline-item {
      transition: none;
    }
  }

  article {
    contain: content;
  }
</style>

<script>
  // Use requestIdleCallback for non-critical initialization
  const initTimeline = () => {
    const items = document.querySelectorAll('.timeline-item');
    if (!items.length) return;

    const io = new IntersectionObserver(
      (entries) => {
        entries.forEach(entry => {
          if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            io.unobserve(entry.target);
          }
        });
      },
      { rootMargin: '50px' }
    );

    items.forEach(item => io.observe(item));
  };

  // Initialize on page load
  if ('requestIdleCallback' in window) {
    requestIdleCallback(initTimeline);
  } else {
    setTimeout(initTimeline, 1);
  }

  // Re-initialize after Astro page transitions
  document.addEventListener('astro:after-swap', initTimeline);
</script>
