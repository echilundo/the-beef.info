---
import "../styles/global.css";
import "@fontsource/inter/latin-400.css";
import "@fontsource/inter/latin-600.css";
import { ClientRouter } from "astro:transitions";

interface Props {
  title: string;
  description: string;
  image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const { title, description, image = "/nano.png" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon-dark.svg" media="(prefers-color-scheme: dark)">
<link rel="icon" type="image/svg+xml" href="/favicon-light.svg" media="(prefers-color-scheme: light)">
<link rel="icon" type="image/x-icon" href="/favicon-light.svg">
<meta name="generator" content={Astro.generator} />

<!-- Preload critical assets -->
<link 
  rel="modulepreload" 
  href="/_astro/ClientRouter.astro_astro.CMTcOisY.js" 
  as="script"
/>

<!-- Font optimization -->
<link 
  rel="preload" 
  href="/assets/inter-latin-400-normal.C38fXH4l.woff2" 
  as="font"
  type="font/woff2"
  crossorigin
/>
<link 
  rel="preload" 
  href="/assets/inter-latin-600-normal.LgqL8muc.woff2" 
  as="font"
  type="font/woff2"
  crossorigin
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<!-- View Transitions -->
<ClientRouter />

<!-- Critical CSS -->
<style is:inline>
  :root {
    color-scheme: light;
    --initial-theme: 'light';
  }
  :root.dark {
    color-scheme: dark;
    --initial-theme: 'dark';
  }
  body {
    font-family: Inter, system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
    opacity: 0;
  }
  .fonts-loaded body {
    opacity: 1;
    transition: opacity .1s ease-out;
  }
</style>

<!-- Critical JS -->
<script is:inline>
  // Minimal theme initialization - runs immediately
  (function() {
    const theme = localStorage.theme === "dark" || (!localStorage.theme && window.matchMedia("(prefers-color-scheme: dark)").matches) ? "dark" : "light";
    document.documentElement.classList[theme === "dark" ? "add" : "remove"]("dark");
    document.documentElement.style.setProperty("--initial-theme", `'${theme}'`);
  })();

  // Font loading optimization
  (function() {
    if ("fonts" in document) {
      Promise.all([
        document.fonts.load("1em Inter"),
        document.fonts.load("600 1em Inter")
      ]).then(() => {
        requestAnimationFrame(() => {
          document.documentElement.classList.add("fonts-loaded");
        });
      });
    } else {
      document.documentElement.classList.add("fonts-loaded");
    }
  })();
</script>

<!-- Deferred JS -->
<script>
  // Use requestIdleCallback for non-critical operations
  const scheduleIdleTask = (callback: () => void) => {
    if ("requestIdleCallback" in window) {
      requestIdleCallback(callback, { timeout: 1000 });
    } else {
      setTimeout(callback, 1);
    }
  };

  // Theme handling - deferred
  scheduleIdleTask(() => {
    const mediaQuery = window.matchMedia("(prefers-color-scheme: dark)");
    const handleThemeChange = (e: MediaQueryListEvent) => {
      if (!localStorage.theme) {
        requestAnimationFrame(() => {
          document.documentElement.classList.toggle("dark", e.matches);
        });
      }
    };
    
    mediaQuery.addEventListener("change", handleThemeChange);
  });

  // Scroll handling - optimized with ResizeObserver
  scheduleIdleTask(() => {
    let ticking = false;
    const scrollThreshold = 0;
    
    const handleScroll = () => {
      if (!ticking) {
        requestAnimationFrame(() => {
          const shouldShowHeader = window.scrollY > scrollThreshold;
          document.documentElement.classList.toggle("scrolled", shouldShowHeader);
          ticking = false;
        });
        ticking = true;
      }
    };

    document.addEventListener("scroll", handleScroll, { passive: true });
  });
</script>

<style>
  /* Font loading optimization */
  @font-face {
    font-family: 'Inter';
    font-style: normal;
    font-weight: 400;
    font-display: swap;
    src: url('/assets/inter-latin-400-normal.C38fXH4l.woff2') format('woff2');
    font-synthesis: none;
  }
  
  @font-face {
    font-family: 'Inter';
    font-style: normal;
    font-weight: 600;
    font-display: swap;
    src: url('/assets/inter-latin-600-normal.LgqL8muc.woff2') format('woff2');
    font-synthesis: none;
  }
</style>

<slot />